// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  email String @unique
  name  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  LoginToken           LoginToken[]
  posts                Post[]
  balance              Balance?
  purchasedSourceCodes PurchasedSourceCode[]
}

model Post {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  image  String
  name   String
  price  Int
  viewer Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User   @relation(fields: [authorId], references: [id])
  authorId String @db.ObjectId

  category Category?

  comments Comment[]

  purchasedSourceCode   PurchasedSourceCode @relation(fields: [purchasedSourceCodeId], references: [id])
  purchasedSourceCodeId String              @unique @db.ObjectId
}

model Category {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  slug String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post   Post   @relation(fields: [postId], references: [id])
  postId String @unique @db.ObjectId
}

model Comment {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  comment String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post   Post   @relation(fields: [postId], references: [id])
  postId String @db.ObjectId
}

model Balance {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  balance  Int
  currency String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @db.ObjectId

  transactions Transaction[]
}

model Transaction {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  amount      Int
  type        String // "deposit" | "withdrawal"
  description String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  balance   Balance @relation(fields: [balanceId], references: [id])
  balanceId String  @db.ObjectId
}

model PurchasedSourceCode {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @db.ObjectId

  post Post?
}

model LoginToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  redirect  String   @default("/")
}
