// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    String @id @default(uuid()) @map("_id")
  email String @unique
  name  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  LoginToken           LoginToken[]
  posts                Post[]
  balance              Balance?
  purchasedSourceCodes PurchasedSourceCode[]
}

model Post {
  id        String   @id @default(uuid()) @map("_id")
  image     String
  name      String
  price     Int
  viewer    Int     @default(0)
  published Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User?   @relation(fields: [authorId], references: [id])
  authorId String?

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?   @unique

  comments Comment[]

  purchasedSourceCode   PurchasedSourceCode? @relation(fields: [purchasedSourceCodeId], references: [id])
  purchasedSourceCodeId String?              @unique
}

model Category {
  id   String  @id @default(uuid()) @map("_id")
  name String
  slug String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts Post[]
}

model Comment {
  id      String  @id @default(uuid()) @map("_id")
  comment String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post   Post   @relation(fields: [postId], references: [id])
  postId String
}

model Balance {
  id String  @id @default(uuid()) @map("_id")

  balance  Int
  currency String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  transactions Transaction[]
}

model Transaction {
  id String  @id @default(uuid()) @map("_id")

  amount      Int
  type        String // "deposit" | "withdrawal"
  description String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  balance   Balance @relation(fields: [balanceId], references: [id])
  balanceId String 
}

model PurchasedSourceCode {
  id String  @id @default(uuid()) @map("_id")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  post Post?
}

model LoginToken {
  id        String    @id @default(uuid()) @map("_id")
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String  
  redirect  String   @default("/")
}
